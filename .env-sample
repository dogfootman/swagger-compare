# ===========================================
# API Compare Tool - 환경변수 설정 파일
# ===========================================
# 이 파일을 .env로 복사하고 실제 값으로 수정하세요
# cp .env-sample .env

# ===========================================
# 서버 설정
# ===========================================
# 애플리케이션 포트 (기본값: 3000)
PORT=3000

# ===========================================
# GitHub API 설정
# ===========================================
# GitHub Personal Access Token (필수)
# 생성 방법: https://github.com/settings/tokens
# 필요한 권한: repo (private repository 접근 시)
GITHUB_TOKEN=your_github_token_here

# GitHub API URL (기본값: https://api.github.com)
# GitHub Enterprise 사용 시 변경
GITHUB_API_URL=https://api.github.com

# ===========================================
# 애플리케이션 설정
# ===========================================
# 애플리케이션 이름 (기본값: API Compare Tool)
NEXT_PUBLIC_APP_NAME=API Compare Tool

# 애플리케이션 버전 (기본값: 1.0.0)
NEXT_PUBLIC_APP_VERSION=1.0.0

# ===========================================
# Docker Compose 전용 설정
# ===========================================
# oasdiff 도구 경로 (Docker 내부 경로)
OASDIFF_PATH=/usr/local/bin/oasdiff

# ===========================================
# Redis 설정 (선택사항)
# ===========================================
# Redis 연결 URL (Redis 사용 시)
# REDIS_URL=redis://redis:6379

# Redis 비밀번호 (Redis 인증 사용 시)
# REDIS_PASSWORD=your_redis_password

# ===========================================
# 개발 환경 설정
# ===========================================
# 개발 모드 활성화 (true/false)
# NODE_ENV=development

# 디버그 모드 활성화
# DEBUG=*

# ===========================================
# 로깅 설정
# ===========================================
# 로그 레벨 (error, warn, info, debug)
# LOG_LEVEL=info

# 로그 파일 경로
# LOG_FILE=/app/logs/app.log

# ===========================================
# 보안 설정
# ===========================================
# 세션 시크릿 (프로덕션 환경에서 변경 필요)
# SESSION_SECRET=your_session_secret_here

# CORS 허용 도메인 (쉼표로 구분)
# CORS_ORIGINS=http://localhost:3000,https://yourdomain.com

# ===========================================
# 성능 설정
# ===========================================
# 요청 타임아웃 (밀리초)
# REQUEST_TIMEOUT=30000

# 캐시 TTL (초)
# CACHE_TTL=3600

# ===========================================
# 모니터링 설정
# ===========================================
# 메트릭 수집 활성화 (true/false)
# ENABLE_METRICS=false

# 헬스체크 엔드포인트
# HEALTH_CHECK_PATH=/api/health

# ===========================================
# 파일 업로드 설정
# ===========================================
# 최대 파일 크기 (바이트)
# MAX_FILE_SIZE=10485760

# 허용된 파일 확장자 (쉼표로 구분)
# ALLOWED_FILE_EXTENSIONS=.yaml,.yml,.json

# ===========================================
# 알림 설정 (선택사항)
# ===========================================
# Slack 웹훅 URL
# SLACK_WEBHOOK_URL=https://hooks.slack.com/services/...

# 이메일 SMTP 설정
# SMTP_HOST=smtp.gmail.com
# SMTP_PORT=587
# SMTP_USER=your_email@gmail.com
# SMTP_PASS=your_app_password

# ===========================================
# 사용 예시
# ===========================================
# 1. 기본 설정으로 시작:
#    - GITHUB_TOKEN만 설정하고 나머지는 기본값 사용
#
# 2. 개발 환경:
#    - NODE_ENV=development
#    - DEBUG=*
#    - LOG_LEVEL=debug
#
# 3. 프로덕션 환경:
#    - GITHUB_TOKEN 설정
#    - SESSION_SECRET 설정
#    - CORS_ORIGINS 설정
#    - ENABLE_METRICS=true
#
# 4. GitHub Enterprise:
#    - GITHUB_API_URL=https://your-github-enterprise.com/api/v3
#
# ===========================================
# 주의사항
# ===========================================
# 1. GITHUB_TOKEN은 절대 공개 저장소에 커밋하지 마세요
# 2. 프로덕션 환경에서는 모든 보안 관련 설정을 변경하세요
# 3. .env 파일은 .gitignore에 포함되어 있는지 확인하세요
# 4. 민감한 정보는 환경변수로만 관리하고 코드에 하드코딩하지 마세요
